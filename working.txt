import React, { Suspense, useRef, useState } from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, useGLTF, Environment, Html, useProgress } from '@react-three/drei';
import * as THREE from 'three';

// Loading component based on best practices
function Loader() {
  const { progress } = useProgress();
  return (
    <Html center>
      <div style={{
        color: '#ffffff',
        fontSize: '20px',
        fontWeight: 'bold',
        textAlign: 'center',
        background: 'rgba(0,0,0,0.8)',
        padding: '20px',
        borderRadius: '10px'
      }}>
        <div style={{
          border: '3px solid #f3f3f3',
          borderTop: '3px solid #3498db',
          borderRadius: '50%',
          width: '50px',
          height: '50px',
          animation: 'spin 1s linear infinite',
          margin: '0 auto 15px'
        }}></div>
        {Math.round(progress)}% loaded
      </div>
    </Html>
  );
}

// Simple model component following best practices
function Model() {
  const gltf = useGLTF('/assets/model.glb');
  
  // Debug: log model data
  React.useEffect(() => {
    if (gltf.scene) {
      console.log('Model loaded successfully:', gltf.scene);
      console.log('Model children:', gltf.scene.children.length);
      
      // Auto-scale if needed
      const box = new THREE.Box3().setFromObject(gltf.scene);
      const size = box.getSize(new THREE.Vector3());
      console.log('Model dimensions:', size);
      
      if (size.length() > 50) {
        const scale = 10 / size.length();
        gltf.scene.scale.setScalar(scale);
        console.log('Applied scale:', scale);
      }
    }
  }, [gltf.scene]);
  
  return <primitive object={gltf.scene} />;
}

// Preload the model for better performance
useGLTF.preload('/assets/model.glb');

export default function App() {
  const [autoRotate, setAutoRotate] = useState(false);
  const controlsRef = useRef();

  const zoomIn = () => {
    if (controlsRef.current) {
      controlsRef.current.dollyIn(1.2);
      controlsRef.current.update();
    }
  };

  const zoomOut = () => {
    if (controlsRef.current) {
      controlsRef.current.dollyOut(1.2);
      controlsRef.current.update();
    }
  };

  const resetView = () => {
    if (controlsRef.current) {
      controlsRef.current.reset();
    }
  };

  const buttonStyle = {
    background: 'rgba(255,255,255,0.9)',
    border: 'none',
    borderRadius: '8px',
    padding: '12px',
    margin: '5px',
    cursor: 'pointer',
    fontSize: '18px',
    fontWeight: 'bold',
    boxShadow: '0 2px 10px rgba(0,0,0,0.2)',
    transition: 'all 0.2s ease',
    minWidth: '50px',
    minHeight: '50px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  };

  const activeButtonStyle = {
    ...buttonStyle,
    background: 'rgba(52, 152, 219, 0.9)',
    color: 'white'
  };

  return (
    <div style={{
      width: '100vw',
      height: '100vh',
      margin: 0,
      padding: 0,
      fontFamily: 'Arial, sans-serif',
      background: '#1a1a1a'
    }}>
      {/* Header */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        zIndex: 100,
        padding: '20px',
        background: 'rgba(0,0,0,0.3)',
        backdropFilter: 'blur(10px)'
      }}>
        <h1 style={{
          color: 'white',
          margin: 0,
          fontSize: '28px',
          fontWeight: '300'
        }}>
          3D Model Viewer
        </h1>
      </div>

      {/* Control Panel */}
      <div style={{
        position: 'absolute',
        bottom: '20px',
        left: '20px',
        zIndex: 100,
        display: 'flex',
        flexDirection: 'column',
        gap: '10px'
      }}>
        <div style={{
          display: 'flex',
          flexDirection: 'row',
          gap: '5px'
        }}>
          <button
            style={buttonStyle}
            onClick={zoomIn}
            onMouseEnter={(e) => e.target.style.transform = 'scale(1.1)'}
            onMouseLeave={(e) => e.target.style.transform = 'scale(1)'}
            title="Zoom In"
          >
            üîç+
          </button>
          <button
            style={buttonStyle}
            onClick={zoomOut}
            onMouseEnter={(e) => e.target.style.transform = 'scale(1.1)'}
            onMouseLeave={(e) => e.target.style.transform = 'scale(1)'}
            title="Zoom Out"
          >
            üîç-
          </button>
          <button
            style={buttonStyle}
            onClick={resetView}
            onMouseEnter={(e) => e.target.style.transform = 'scale(1.1)'}
            onMouseLeave={(e) => e.target.style.transform = 'scale(1)'}
            title="Reset View"
          >
            üè†
          </button>
        </div>
        <button
          style={autoRotate ? activeButtonStyle : buttonStyle}
          onClick={() => setAutoRotate(!autoRotate)}
          onMouseEnter={(e) => e.target.style.transform = 'scale(1.1)'}
          onMouseLeave={(e) => e.target.style.transform = 'scale(1)'}
          title="Auto Rotate"
        >
          üîÑ
        </button>
      </div>

      {/* 3D Canvas */}
      <Canvas
        shadows
        camera={{ 
          position: [15, 15, 15], 
          fov: 60 
        }}
        style={{ width: '100%', height: '100%' }}
      >
        {/* Lighting setup */}
        <ambientLight intensity={0.5} />
        <directionalLight 
          position={[10, 10, 5]} 
          intensity={1} 
          castShadow
          shadow-mapSize-width={2048}
          shadow-mapSize-height={2048}
        />
        <pointLight position={[-10, -10, -5]} intensity={0.3} />
        
        {/* Environment for realistic reflections */}
        <Environment preset="city" background={false} />
        
        {/* Model with Suspense loader */}
        <Suspense fallback={<Loader />}>
          <Model />
        </Suspense>
        
        {/* Orbit controls */}
        <OrbitControls
          ref={controlsRef}
          enablePan={true}
          enableZoom={true}
          enableRotate={true}
          dampingFactor={0.1}
          enableDamping={true}
          minDistance={2}
          maxDistance={100}
          autoRotate={autoRotate}
          autoRotateSpeed={1}
        />
      </Canvas>

      {/* Controls info */}
      <div style={{
        position: 'absolute',
        bottom: '20px',
        right: '20px',
        background: 'rgba(0,0,0,0.8)',
        color: 'white',
        padding: '15px',
        borderRadius: '8px',
        fontSize: '14px',
        fontFamily: 'monospace'
      }}>
        <div>üñ±Ô∏è Drag: Rotate</div>
        <div>üîç Scroll: Zoom</div>
        <div>‚å®Ô∏è Right-click + Drag: Pan</div>
      </div>

      {/* CSS Animation */}
      <style>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        body {
          margin: 0;
          overflow: hidden;
        }
      `}</style>
    </div>
  );
}